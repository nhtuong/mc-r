{
    "contents" : "#Package: mc\n#Type: Package\n#Title: Commonly used functions for Nutriomique Team (INSERM U872)\n#Version: 0.1\n#Date: 2013-06-12\n#Author: Aurelie Cotillard, Edi Prifti, Hoai Tuong Nguyen (A-Z order)\n#Maintainer: Hoai Tuong Nguyen <hoai-tuong.nguyen@inserm.fr>\n#Description: Statistical and datamining tools for metagenomic data analysis.\n#License: PPL\n\n#Examples\nif(FALSE){\n  \n  #load \"mc\" package\n  library(mc)\n  \n  #load \"xtable\" package, automatically install the package if it does not exist, then load it\n  library.mc(\"xtable\")\n  \n  #read a large file\n  data<-read.table.mc(\"http://statistics.vn/data/doesgenes.txt\",header=T,sep=\";\",nrow=1000)\n  \n  #get statistics on the columns of a matrix/data.frame and export the results as table to Latex codes\n  attach(mtcars)\n  sum<-summary.numeric.mc(mtcars,latex=T)\n  \n  #test the normality of a (list of) numeric variable(s)\n  attach(mtcars)\n  normality.mc(mtcars)\n  \n  #get class type for a (list of) variable(s)\n  attach(mtcars)\n  class.mc(mtcars)\n  \n}\n\n\n\n#'@name check.installed.mc\n#'@aliases check.installed.mc\n#'@docType methods\n#'@title Checking package installation\n#'@description Check whether a packages is installed\n#'@param pkg name of package\n#'@return A logical value indicating whether the package is installed\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'check.installed.mc(\"xtable\")\n#'@seealso \\code{\\link[utils]{install.packages}}\ncheck.installed.mc<-function(pkg){\n  return(is.element(pkg, installed.packages()[,1]))\n}\n\n\n\n#'@name library.mc\n#'@aliases library.mc\n#'@docType methods\n#'@title Loading and Listing of Packages\n#'@description On-the-fly load or install a package\n#'@param pkg name of package\n#'@return A list of attached packages\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'check.installed.mc(\"xtable\")\n#'@seealso \\code{\\link[utils]{install.packages}}\nlibrary.mc<-function(pkg){\n  if(!check.installed.mc(pkg))\n    install.packages(pkg)\n  library(pkg,character.only=TRUE)\n}\n\n\n\n#Load dependencies\nlibrary.mc(\"xtable\")\n\n#'@name read.table.mc\n#'@aliases read.table.mc\n#'@docType methods\n#'@title Data Input\n#'@description Read a very large data file\n#'@param file the name of the file which the data are to be read from.\n#'@param header a logical value indicating whether the file contains the names of the variables as its first line. If missing, the value is determined from the file format: header is set to TRUE if and only if the first row contains one fewer field than the number of columns.\n#'@param sep  the field separator character. Values on each line of the file are separated by this character. If sep = \"\" (the default for read.table) the separator is 'white space', that is one or more spaces, tabs, newlines or carriage returns. A (character) name of the column in a \\code{\\link[base]{data.frame}} which contains the addresses\n#'@param nrow number of rows\n#'@return A data frame (\\code{\\link[base]{data.frame}}) containing a representation of the data in the file\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'library(mc)\n#'data<-read.table.mc(\"http://statistics.vn/data/doesgenes.txt\",header=T,sep=\";\",nrow=1000)\n#'@seealso \\code{\\link[utils]{read.table}}\nread.table.mc<-function(file,header=FALSE,sep=\"\",nrow=-1){\n  tab5rows <- read.table(file, nrows = 5,sep=sep)\n  classes <- sapply(tab5rows, class)\n  tabAll <- read.table(file,  header=header, colClasses=classes,sep=sep,nrows=nrow,comment.char = \"\")\n  return(tabAll)\n}\n\n\n\n#'@name summary.numeric.mc\n#'@aliases summary.numeric.mc\n#'@docType methods\n#'@title Object Summaries\n#'@description Summarize an numeric table, save the output to a table, export the output to Latex code\n#'@param object an object for which a summary is desired.\n#'@param latex a logical value indicating whether output to latex is called\n#'@return Table of of the value returned by summary (and output Latex code if parameter 'latex' is TRUE)\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'data(mtcars)\n#'sum<-summary.numeric.mc(mtcars,latex=T)\n#'@seealso \\code{\\link[base]{summary}}\nsummary.numeric.mc<-function(object,latex=FALSE){\n  classes<-sapply(1:ncol(object), function(x) class(object[,x]))\n  summary.numeric<-sapply(which(classes==\"numeric\"), function(x) as.vector(summary(object[,x]))) \n  if (length(which(is.na(object)))>0){\n    summary.numeric<-sapply(which(classes==\"numeric\"), function(x) as.vector(summary(object[,x]))) \n    tmp <- object.frame()\n    for(i in seq(along=summary.numeric)) for(j in 1:length(summary.numeric[[i]]))\n      tmp[i,j] <- ifelse(is.na(summary.numeric[[i]][j]),\"0\",summary.numeric[[i]][j])\n    summary.numeric<-tmp\n    colnames(summary.numeric)<-c(names(summary(1)),\"NA\")\n    summary.numeric[which(is.na(summary.numeric[,7])),7]<-\"0\"    \n  } else {\n    summary.numeric<-t(data.frame(sapply(which(classes==\"numeric\"), function(x) as.vector(summary(object[,x])))))\n    colnames(summary.numeric)<-names(summary(1))\n  }\n  rownames(summary.numeric)<-colnames(object)[which(classes==\"numeric\")]\n  if(latex){\n    print(xtable(summary.numeric))\n  }\n  return(summary.numeric)\n}\n\n\n\n#'@name normality.mc\n#'@aliases normality.mc\n#'@docType methods\n#'@title Normality Test\n#'@description Perform a normality test for variables \n#'@param m variable (list, matrix, data frame...)\n#'@param alpha p-value threshold\n#'@return logical value indicating whether variable is normally distributed\n#'@author Hoai Tuong Nguyen\n#'@examples\n#' attach(mtcars)\n#' normality.mc(mtcars)\nnormality.mc<-function(m,alpha=0.05){\n  if (class(m)==\"data.frame\" || class(m)==\"matrix\")\n    return(sapply(1:ncol(m), function(x) shapiro.test(m[,x])$p.value<=alpha))\n  else return(shapiro.test(m)$p.value<=alpha)\n}\n\n\n\n#'@name class.mc\n#'@aliases class.mc\n#'@docType methods\n#'@title Object Classes\n#'@description Get class of variable\n#'@param variable (list, matrix, data frame...)\n#'@return class of variables or of columns of matrix/data frame\n#'@author Hoai Tuong Nguyen\n#'@examples\n#' attach(mtcars)\n#' class.mc(mtcars)\nclass.mc<-function(m){\n  if (class(m)==\"data.frame\" || class(m)==\"matrix\")\n    return(sapply(1:ncol(m),function(x) class(m[,x])))\n  else return(class(m))\n}",
    "created" : 1371137601460.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1607233310",
    "id" : "7B6D209D",
    "lastKnownWriteTime" : 1371139478,
    "path" : "~/metacardis/7.scripts/released/svn/mc/R/mcLite.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}